I"çu<p>J√° abordei um pouco sobre testes unit√°rios com mocks. Particularmente n√£o tenho nenhuma prefer√™ncia em fazer testes da forma mockista ou da forma classicista, creio que as duas formas s√£o interessantes e servem √† prop√≥sitos distintos. Enquanto uma est√° preocupada com a forma como os objetos colaboram entre si, a outra est√° preocupada no resultado final. Ainda com rela√ß√£o a quantidade de colaboradores com as quais os objetos se preocupam, podemos chama-los de testes unit√°rios, de integra√ß√£o, de aceita√ß√£o e muitos outros nomes.</p>

<p>Em programa√ß√£o orientada √† objetos, um teste unit√°rio se preocupa com apenas um objeto, ele testa apenas o comportamento daquele objeto, no entanto isto n√£o √© uma regra para ser levada ao p√© da letra. Alguns testes, tidos como unit√°rios, acabam testando um pouco al√©m das fronteiras do pr√≥prio objeto ou da pr√≥pria unidade √† ser testada.</p>

<p>Existe uma discuss√£o muito grande na comunidade sobre as vantagens de se realizar testes unit√°rios da forma mockista X a forma classicista. Quando temos um sistema onde muitos objetos colaboram entre si, uma forma de se testar apenas um objeto √© mockando ou criando falsamente os objetos colaboradores, fazendo com que o teste s√≥ exercite a unidade que de fato deve ser testada. Ao usar os objetos colaboradores reais o teste unit√°rio acabar√° por testar todos os objetos colaboradores e isso se caracterizar√° como um teste de integra√ß√£o entre os objetos e n√£o mais um teste puramente unit√°rio. Como disse a discuss√£o √© muito grande e n√£o pretendo incita-la aqui.
Mas um sistema n√£o √© composto s√≥ de testes unit√°rios. √â necess√°rio que existam testes com um n√≠vel mais alto de abstra√ß√£o. No caso de um sistema web o n√≠vel mais alto de abstra√ß√£o √© testar a funcionalidade no browser, como se fosse um usu√°rio. Existem v√°rias ferramentas para automatizar este processo e em ruby/rails uma das mais populares √© a gem Capybara que √© usada em conjunto com RSpec para gerar testes chamados de aceita√ß√£o, ou que simulam o caso de uso como um usu√°rio deve us√°-lo, de forma autom√°tica. O Capybara em conjunto com RSpec facilita e muito a cria√ß√£o de testes automatizados com o browser mas esses testes podem rapidamente se tornar uma bagun√ßa se n√£o adotarmos t√°ticas e metodologias para reaproveitamento de c√≥digo, aqui √© que entra o padr√£o page object.
O padr√£o Page Object √© uma excelente forma de se obter reusabilidade nos seus c√≥digos de testes com browser. Normalmente quando escrevemos testes relacionados √† intera√ß√µes com elementos html ou javascript, o c√≥digo tende a se tornar muito acoplado √† p√°gina √† ser testada. Com Page Objects podemos criar abstra√ß√µes que acabam por se tornar uma API do caso de uso e escondem a complexidade das APIs para acesso aos campos de um formul√°rio ou tabela por exemplo. Com este padr√£o podemos tamb√©m reutilizar o Page Object em outros m√©todos sempre acessando a sua API, tornando os testes bem mais simples e f√°ceis de serem lidos. Um outro fator importante √© que se mudarmos uma p√°gina espec√≠fica s√≥ teremos que mudar em um local nos nossos testes.</p>

<h2 id="como-martin-fowler-cita-em-seu-famoso-texto-sobre-este-padr√£o">Como Martin Fowler cita em seu famoso texto sobre este padr√£o:</h2>

<blockquote>
  <p>The basic rule of thumb for a page object is that it should allow a software client to do anything and see anything that a human can. It should also provide an interface that‚Äôs easy to program to and hides the underlying widgetry in the window. So to access a text field you should have accessor methods that take and return a string, check boxes should use booleans, and buttons should be represented by action oriented method names. The page object should encapsulate the mechanics required to find and manipulate the data in the gui control itself. A good rule of thumb is to imagine changing the concrete control ‚Äî in which case the page object interface shouldn‚Äôt change.</p>
</blockquote>

<p>O padr√£o page object, n√£o necessariamente necessita representar uma p√°gina, pode representar um elemento complexo de uma p√°gina ou um elemento que se repete em v√°rias p√°ginas. Pode ser usado tamb√©m para testes de desktop em frameworks como Java/Swing e outros. Um Page Object n√£o deve contem nenhum tipo de assert sendo sua √∫nica responsabilidade representar uma p√°gina ou um objeto de p√°gina mais complexo. √â bom que seus m√©todos retornem atributos como string, date, boolean ou um outro page object.</p>

<p>Para demonstrar o uso de page objects eu preferi mostrar um caso CRUD j√° que √© facilmente entendido por todos e √© um caso que apesar de simples, consegue demonstrar o poder de reusabilidade e clareza que o padr√£o page object nos entrega. √â claro que voc√™ pode optar por fazer testes mais rigorosos do que estes aqui apresentados, mas a inten√ß√£o aqui √© mostrar o uso do padr√£o e n√£o, ser o exemplo perfeito de testes de software.</p>

<h3 id="aqui-est√°-o-page-object-da-p√°gina-de-login">Aqui est√° o Page Object da p√°gina de Login:</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LoginPageObject</span> <span class="o">&lt;</span> <span class="no">BaseObject</span>

  <span class="k">def</span> <span class="nf">visit_root</span>
    <span class="n">visit</span> <span class="s1">'/'</span>
    <span class="nb">self</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">fill_in</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.user.email'</span><span class="p">),</span> <span class="ss">with: </span><span class="n">user</span><span class="p">.</span><span class="nf">email</span>
    <span class="n">fill_in</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.user.password'</span><span class="p">),</span> <span class="ss">with: </span><span class="n">user</span><span class="p">.</span><span class="nf">password</span>
    <span class="n">click_on</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'devise.links.sign_in'</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="come√ßando-com-o-arquivo-de-testes-do-rspec-neste-arquivo-est√£o-os-testes-de-crud">Come√ßando com o arquivo de testes do RSpec. Neste arquivo est√£o os testes de crud:</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'Residence Integration Tests'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">email: </span><span class="s1">'admin@admin.com'</span><span class="p">,</span> <span class="ss">password: </span><span class="s1">'123456'</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:login_page</span><span class="p">)</span> <span class="p">{</span> <span class="no">LoginPageObject</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:index_page</span><span class="p">)</span> <span class="p">{</span> <span class="no">IndexResidencePage</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

  <span class="n">context</span> <span class="s1">'#valid_user'</span> <span class="k">do</span>

    <span class="n">before</span> <span class="p">{</span>
      <span class="n">login_page</span><span class="p">.</span><span class="nf">visit_root</span><span class="p">.</span><span class="nf">login</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">context</span> <span class="s1">'List Residences'</span> <span class="k">do</span>
      <span class="n">let!</span><span class="p">(</span><span class="ss">:residence</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:residence</span><span class="p">,</span> <span class="ss">cep: </span><span class="s1">'57031-530'</span><span class="p">)</span> <span class="p">}</span>


      <span class="n">scenario</span> <span class="s1">'Render the Lists of Residences'</span> <span class="k">do</span>
        <span class="n">index_page</span><span class="p">.</span><span class="nf">visit_page</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">index_page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_residence</span><span class="p">(</span><span class="n">residence</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">scenario</span> <span class="s1">'Click on new'</span> <span class="k">do</span>
      <span class="n">index_page</span><span class="p">.</span><span class="nf">visit_page</span>
      <span class="n">new_page</span> <span class="o">=</span> <span class="n">index_page</span><span class="p">.</span><span class="nf">click_on_new</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">new_page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_current_path</span><span class="p">(</span><span class="n">new_admin_residence_path</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">context</span> <span class="s2">"Create a Residence"</span> <span class="k">do</span>
      <span class="n">let</span><span class="p">(</span><span class="ss">:new_residence</span><span class="p">)</span> <span class="p">{</span> <span class="n">build</span><span class="p">(</span><span class="ss">:residence</span><span class="p">,</span> <span class="ss">cep: </span><span class="s1">'57000-000'</span><span class="p">)</span> <span class="p">}</span>

      <span class="n">before</span> <span class="p">{</span>
        <span class="n">index_page</span><span class="p">.</span><span class="nf">visit_page</span>
      <span class="p">}</span>

      <span class="n">scenario</span> <span class="s1">'Creates a Valid Residence'</span> <span class="k">do</span>
        <span class="n">new_page</span> <span class="o">=</span> <span class="n">index_page</span><span class="p">.</span><span class="nf">click_on_new</span>
        <span class="n">new_page</span><span class="p">.</span><span class="nf">fill_in_with_residence</span><span class="p">(</span><span class="n">new_residence</span><span class="p">)</span>
        <span class="n">index_page</span> <span class="o">=</span> <span class="n">new_page</span><span class="p">.</span><span class="nf">click_on_save</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">index_page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_message</span><span class="p">(</span><span class="s1">'Domic√≠lio criado com sucesso.'</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">scenario</span> <span class="s1">'Create with invalid value'</span> <span class="k">do</span>
        <span class="n">new_page</span> <span class="o">=</span> <span class="n">index_page</span><span class="p">.</span><span class="nf">click_on_new</span>
        <span class="n">new_page</span><span class="p">.</span><span class="nf">fill_in_with_residence</span><span class="p">(</span><span class="n">new_residence</span><span class="p">)</span>
        <span class="n">new_page</span><span class="p">.</span><span class="nf">make_blank_field</span><span class="p">(</span><span class="s1">'#residence_cep'</span><span class="p">)</span>
        <span class="n">new_page</span><span class="p">.</span><span class="nf">click_on_save</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">new_page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_invalid_message_on_div</span><span class="p">(</span><span class="s1">'.residence_cep'</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">context</span> <span class="s2">"Editing a Residence"</span> <span class="k">do</span>
      <span class="n">let!</span><span class="p">(</span><span class="ss">:residence</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:residence</span><span class="p">,</span> <span class="ss">cep: </span><span class="s1">'57031-530'</span><span class="p">)</span> <span class="p">}</span>

      <span class="n">before</span> <span class="p">{</span>
        <span class="n">index_page</span><span class="p">.</span><span class="nf">visit_page</span>
      <span class="p">}</span>

      <span class="n">scenario</span> <span class="s1">'Edit the residence with success'</span> <span class="k">do</span>
        <span class="n">edit_page</span> <span class="o">=</span> <span class="n">index_page</span><span class="p">.</span><span class="nf">click_on_edit</span>
        <span class="n">edit_page</span><span class="p">.</span><span class="nf">change_field</span><span class="p">(</span><span class="s1">'#residence_cep'</span><span class="p">,</span> <span class="s1">'57000-000'</span><span class="p">)</span>
        <span class="n">index_page</span> <span class="o">=</span> <span class="n">edit_page</span><span class="p">.</span><span class="nf">click_on_save</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">index_page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_message</span><span class="p">(</span><span class="s1">'Domic√≠lio atualizado com sucesso.'</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">scenario</span> <span class="s1">'Edit with invalid value'</span> <span class="k">do</span>
        <span class="n">edit_page</span> <span class="o">=</span> <span class="n">index_page</span><span class="p">.</span><span class="nf">click_on_edit</span>
        <span class="n">edit_page</span><span class="p">.</span><span class="nf">change_field</span><span class="p">(</span><span class="s1">'#residence_cep'</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span>
        <span class="n">edit_page</span><span class="p">.</span><span class="nf">click_on_save</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">edit_page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_invalid_message_on_div</span><span class="p">(</span><span class="s1">'.residence_cep'</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">context</span> <span class="s2">"Remove residence"</span> <span class="k">do</span>
      <span class="n">let!</span><span class="p">(</span><span class="ss">:residence</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:residence</span><span class="p">,</span> <span class="ss">cep: </span><span class="s1">'57031-530'</span><span class="p">)</span> <span class="p">}</span>

      <span class="n">scenario</span> <span class="s1">'Remove the residence'</span> <span class="k">do</span>
        <span class="n">index_page</span><span class="p">.</span><span class="nf">visit_page</span>
        <span class="n">index_page</span><span class="p">.</span><span class="nf">click_on_remove</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">index_page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_message</span><span class="p">(</span><span class="s1">'Domic√≠lio foi exclu√≠do com sucesso.'</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Este √© o Page Object da tela de listagem. Note que o c√≥digo de mais baixo n√≠vel que seria o c√≥digo de acesso aos elementos de p√°gina e c√≥digo para navegar entre as p√°ginas ou para ir para algum path est√£o encapsulados em m√©todos que possuem nomes mais claros. O ideal √© testar se todos os elementos que o caso de uso pede est√£o na tela, mas neste exemplo, s√≥ para demonstrar eu verifico, somente, a exist√™ncia do cep. Note tamb√©m que os m√©todos retorna outra p√°gina quando h√° um comportamento que redireciona para uma nova p√°gina.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">IndexResidencePage</span> <span class="o">&lt;</span> <span class="no">BaseObject</span>

  <span class="k">def</span> <span class="nf">visit_page</span>
    <span class="n">visit</span> <span class="n">admin_residences_path</span>
    <span class="nb">self</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">has_residence?</span><span class="p">(</span><span class="n">residence</span><span class="p">)</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s1">'//table/tbody/tr'</span><span class="p">)</span>
    <span class="n">has_expected_fields_in_table</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">residence</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">has_message?</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="n">has_content?</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">click_on_new</span>
    <span class="n">click_link</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'helpers.links.new'</span><span class="p">)</span>
    <span class="no">NewResidencePageObject</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">click_on_edit</span>
   <span class="n">click_on</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'helpers.links.edit'</span><span class="p">)</span>
   <span class="no">EditResidencePageObject</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">click_on_remove</span>
    <span class="n">click_on</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'helpers.links.destroy'</span><span class="p">)</span>
    <span class="nb">self</span>
  <span class="k">end</span>

  <span class="kp">private</span>
  <span class="k">def</span> <span class="nf">has_expected_fields_in_table</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">residence</span><span class="p">)</span>
    <span class="n">content</span><span class="p">.</span><span class="nf">has_content?</span><span class="p">(</span><span class="n">residence</span><span class="p">.</span><span class="nf">name_of_patio</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">content</span><span class="p">.</span><span class="nf">has_content?</span><span class="p">(</span><span class="n">residence</span><span class="p">.</span><span class="nf">cep</span><span class="p">)</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<p>A mesma coisa acontece neste Page Object para a tela de novo registro:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">NewResidencePageObject</span> <span class="o">&lt;</span> <span class="no">BaseObject</span>

  <span class="k">def</span> <span class="nf">has_current_path?</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="n">current_path</span> <span class="o">==</span>  <span class="n">path</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">fill_in_with_residence</span><span class="p">(</span><span class="n">residence</span><span class="p">)</span>
    <span class="n">find</span><span class="p">(</span><span class="s2">"#residence_latitude"</span><span class="p">).</span><span class="nf">set</span><span class="p">(</span><span class="n">residence</span><span class="p">.</span><span class="nf">latitude</span><span class="p">)</span>
    <span class="n">find</span><span class="p">(</span><span class="s2">"#residence_longitude"</span><span class="p">).</span><span class="nf">set</span><span class="p">(</span><span class="n">residence</span><span class="p">.</span><span class="nf">longitude</span><span class="p">)</span>
    <span class="n">fill_in</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.residence.type_of_patio'</span><span class="p">),</span> <span class="ss">with: </span><span class="n">residence</span><span class="p">.</span><span class="nf">type_of_patio</span>
    <span class="n">fill_in</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.residence.name_of_patio'</span><span class="p">),</span> <span class="ss">with: </span><span class="n">residence</span><span class="p">.</span><span class="nf">name_of_patio</span>
    <span class="n">find</span><span class="p">(</span><span class="s2">"#residence_number"</span><span class="p">).</span><span class="nf">set</span><span class="p">(</span><span class="n">residence</span><span class="p">.</span><span class="nf">number</span><span class="p">)</span>
    <span class="n">fill_in</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.residence.municipality'</span><span class="p">),</span> <span class="ss">with: </span><span class="n">residence</span><span class="p">.</span><span class="nf">municipality</span>
    <span class="nb">select</span><span class="p">(</span><span class="s1">'RJ'</span><span class="p">,</span> <span class="ss">from: </span><span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.residence.uf'</span><span class="p">))</span>
    <span class="n">fill_in</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.residence.cep'</span><span class="p">),</span> <span class="ss">with: </span><span class="n">residence</span><span class="p">.</span><span class="nf">cep</span>
    <span class="n">fill_in</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.residence.complement'</span><span class="p">),</span> <span class="ss">with: </span><span class="n">residence</span><span class="p">.</span><span class="nf">complement</span>
    <span class="n">fill_in</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.residence.residencial_phone'</span><span class="p">),</span> <span class="ss">with: </span><span class="n">residence</span><span class="p">.</span><span class="nf">residencial_phone</span>
    <span class="n">choose</span><span class="p">(</span><span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.residence.housing_situations.own'</span><span class="p">))</span>
    <span class="n">choose</span><span class="p">(</span><span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.residence.type_residences.house'</span><span class="p">))</span>
    <span class="n">fill_in</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.residence.number_of_residents'</span><span class="p">),</span> <span class="ss">with: </span><span class="n">residence</span><span class="p">.</span><span class="nf">number_of_residents</span>
    <span class="n">choose</span><span class="p">(</span><span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'activerecord.attributes.residence.conditions_of_land_uses.owner'</span><span class="p">))</span>
    <span class="n">choose</span><span class="p">(</span><span class="s1">'residence_has_energy_power_true'</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">make_blank_field</span><span class="p">(</span><span class="n">field</span><span class="p">)</span>
    <span class="n">find</span><span class="p">(</span><span class="n">field</span><span class="p">).</span><span class="nf">set</span><span class="p">(</span><span class="s1">''</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">click_on_save</span>
    <span class="n">click_on</span> <span class="s1">'Criar Domic√≠lio'</span>
    <span class="no">IndexResidencePage</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">has_invalid_message_on_div?</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
    <span class="n">within</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">has_content?</span><span class="p">(</span><span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'errors.messages.blank'</span><span class="p">))</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="aqui-est√°-o-page-object-de-edi√ß√£o">Aqui est√° o Page Object de edi√ß√£o:</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EditResidencePageObject</span> <span class="o">&lt;</span> <span class="no">BaseObject</span>

  <span class="k">def</span> <span class="nf">change_field</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">).</span><span class="nf">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">click_on_save</span>
    <span class="n">click_on</span> <span class="s1">'Atualizar'</span>
    <span class="no">IndexResidencePage</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">has_invalid_message_on_div?</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
    <span class="n">within</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">has_content?</span><span class="p">(</span><span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s1">'errors.messages.blank'</span><span class="p">))</span>
    <span class="k">end</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<p>N√£o existe uma regra b√°sica do que colocar em um Page Object a n√£o ser que os m√©todos de um page object devem retornar strings, boolean, dates e etc ou um outro page object. Algumas pessoas acham que √© melhor colocar as assertions dentro dos page objects evitando assim a duplica√ß√£o de asserts nos testes. Eu, particularmente, acho que um page object deve encapsular o c√≥digo de mais baixo n√≠vel para acesso √† uma p√°gina ou componente complexo e os asserts devem permanecer onde eles deveriam estar, ou seja, no pr√≥prio teste.</p>

<p>Se voc√™ curtiu, compartilha e manda para os seus amigos.</p>

<p>Se quiser me seguir nas redes sociais, voc√™ pode seguir atrav√©s do:</p>

<ul>
  <li>Youtube: <a href="https://www.youtube.com/thiagoramosal">Youtube Channel(In Portuguese)</a></li>
  <li>Twitter: <a href="https://twitter.com/thramosal">@thramosal</a></li>
  <li>Instagram: <a href="https://instagram.com/thiagoramosal">@thiagoramosal</a></li>
</ul>

<p>Desejo que voc√™ se torne um excelente Dev.</p>
:ET